{"mappings":"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","sources":["F-3D.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat4.js","node_modules/web-gl-helpers/dist/src/AttributeClass.js","node_modules/web-gl-helpers/dist/src/TransformsClass.js","node_modules/web-gl-helpers/dist/src/UniformClass.js","main.js","node_modules/web-gl-helpers/dist/src/HelperFunctions.js"],"sourcesContent":["/**\r\n * Created by Rick on 2021-12-22.\r\n */\r\n'use strict';\r\n\r\n// Positions are in pixels\r\n// For the y axis, 0 is at the top and going down\r\n// The standard for 3D is Y is positive going up\r\nconst F_3D_positions_list = [\r\n  // left column front\r\n  0,   0,  0,\r\n  0, 150,  0,\r\n  30,   0,  0,\r\n  0, 150,  0,\r\n  30, 150,  0,\r\n  30,   0,  0,\r\n\r\n  // top rung front\r\n  30,   0,  0,\r\n  30,  30,  0,\r\n  100,   0,  0,\r\n  30,  30,  0,\r\n  100,  30,  0,\r\n  100,   0,  0,\r\n\r\n  // middle rung front\r\n  30,  60,  0,\r\n  30,  90,  0,\r\n  67,  60,  0,\r\n  30,  90,  0,\r\n  67,  90,  0,\r\n  67,  60,  0,\r\n\r\n  // left column back\r\n  0,   0,  30,\r\n  30,   0,  30,\r\n  0, 150,  30,\r\n  0, 150,  30,\r\n  30,   0,  30,\r\n  30, 150,  30,\r\n\r\n  // top rung back\r\n  30,   0,  30,\r\n  100,   0,  30,\r\n  30,  30,  30,\r\n  30,  30,  30,\r\n  100,   0,  30,\r\n  100,  30,  30,\r\n\r\n  // middle rung back\r\n  30,  60,  30,\r\n  67,  60,  30,\r\n  30,  90,  30,\r\n  30,  90,  30,\r\n  67,  60,  30,\r\n  67,  90,  30,\r\n\r\n  // top\r\n  0,   0,   0,\r\n  100,   0,   0,\r\n  100,   0,  30,\r\n  0,   0,   0,\r\n  100,   0,  30,\r\n  0,   0,  30,\r\n\r\n  // top rung right\r\n  100,   0,   0,\r\n  100,  30,   0,\r\n  100,  30,  30,\r\n  100,   0,   0,\r\n  100,  30,  30,\r\n  100,   0,  30,\r\n\r\n  // under top rung\r\n  30,   30,   0,\r\n  30,   30,  30,\r\n  100,  30,  30,\r\n  30,   30,   0,\r\n  100,  30,  30,\r\n  100,  30,   0,\r\n\r\n  // between top rung and middle\r\n  30,   30,   0,\r\n  30,   60,  30,\r\n  30,   30,  30,\r\n  30,   30,   0,\r\n  30,   60,   0,\r\n  30,   60,  30,\r\n\r\n  // top of middle rung\r\n  30,   60,   0,\r\n  67,   60,  30,\r\n  30,   60,  30,\r\n  30,   60,   0,\r\n  67,   60,   0,\r\n  67,   60,  30,\r\n\r\n  // right of middle rung\r\n  67,   60,   0,\r\n  67,   90,  30,\r\n  67,   60,  30,\r\n  67,   60,   0,\r\n  67,   90,   0,\r\n  67,   90,  30,\r\n\r\n  // bottom of middle rung.\r\n  30,   90,   0,\r\n  30,   90,  30,\r\n  67,   90,  30,\r\n  30,   90,   0,\r\n  67,   90,  30,\r\n  67,   90,   0,\r\n\r\n  // right of bottom\r\n  30,   90,   0,\r\n  30,  150,  30,\r\n  30,   90,  30,\r\n  30,   90,   0,\r\n  30,  150,   0,\r\n  30,  150,  30,\r\n\r\n  // bottom\r\n  0,   150,   0,\r\n  0,   150,  30,\r\n  30,  150,  30,\r\n  0,   150,   0,\r\n  30,  150,  30,\r\n  30,  150,   0,\r\n\r\n  // left side\r\n  0,   0,   0,\r\n  0,   0,  30,\r\n  0, 150,  30,\r\n  0,   0,   0,\r\n  0, 150,  30,\r\n  0, 150,   0]\r\n\r\nconst F_3D_colors_list = [\r\n  // left column front\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n\r\n  // top rung front\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n\r\n  // middle rung front\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n  200,  70, 120,\r\n\r\n  // left column back\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n\r\n  // top rung back\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n\r\n  // middle rung back\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n  80, 70, 200,\r\n\r\n  // top\r\n  70, 200, 210,\r\n  70, 200, 210,\r\n  70, 200, 210,\r\n  70, 200, 210,\r\n  70, 200, 210,\r\n  70, 200, 210,\r\n\r\n  // top rung right\r\n  200, 200, 70,\r\n  200, 200, 70,\r\n  200, 200, 70,\r\n  200, 200, 70,\r\n  200, 200, 70,\r\n  200, 200, 70,\r\n\r\n  // under top rung\r\n  210, 100, 70,\r\n  210, 100, 70,\r\n  210, 100, 70,\r\n  210, 100, 70,\r\n  210, 100, 70,\r\n  210, 100, 70,\r\n\r\n  // between top rung and middle\r\n  210, 160, 70,\r\n  210, 160, 70,\r\n  210, 160, 70,\r\n  210, 160, 70,\r\n  210, 160, 70,\r\n  210, 160, 70,\r\n\r\n  // top of middle rung\r\n  70, 180, 210,\r\n  70, 180, 210,\r\n  70, 180, 210,\r\n  70, 180, 210,\r\n  70, 180, 210,\r\n  70, 180, 210,\r\n\r\n  // right of middle rung\r\n  100, 70, 210,\r\n  100, 70, 210,\r\n  100, 70, 210,\r\n  100, 70, 210,\r\n  100, 70, 210,\r\n  100, 70, 210,\r\n\r\n  // bottom of middle rung.\r\n  76, 210, 100,\r\n  76, 210, 100,\r\n  76, 210, 100,\r\n  76, 210, 100,\r\n  76, 210, 100,\r\n  76, 210, 100,\r\n\r\n  // right of bottom\r\n  140, 210, 80,\r\n  140, 210, 80,\r\n  140, 210, 80,\r\n  140, 210, 80,\r\n  140, 210, 80,\r\n  140, 210, 80,\r\n\r\n  // bottom\r\n  90, 130, 110,\r\n  90, 130, 110,\r\n  90, 130, 110,\r\n  90, 130, 110,\r\n  90, 130, 110,\r\n  90, 130, 110,\r\n\r\n  // left side\r\n  160, 160, 220,\r\n  160, 160, 220,\r\n  160, 160, 220,\r\n  160, 160, 220,\r\n  160, 160, 220,\r\n  160, 160, 220];\r\n\r\nconst F_3D_normals_list = [\r\n  // left column front\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n\r\n  // top rung front\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n\r\n  // middle rung front\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n  0, 0, 1,\r\n\r\n  // left column back\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n\r\n  // top rung back\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n\r\n  // middle rung back\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n  0, 0, -1,\r\n\r\n  // top\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n\r\n  // top rung right\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n\r\n  // under top rung\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n\r\n  // between top rung and middle\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n\r\n  // top of middle rung\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n  0, 1, 0,\r\n\r\n  // right of middle rung\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n\r\n  // bottom of middle rung.\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n\r\n  // right of bottom\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n  1, 0, 0,\r\n\r\n  // bottom\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n  0, -1, 0,\r\n\r\n  // left side\r\n  -1, 0, 0,\r\n  -1, 0, 0,\r\n  -1, 0, 0,\r\n  -1, 0, 0,\r\n  -1, 0, 0,\r\n  -1, 0, 0\r\n]\r\n\r\nconst F_3D_texcoords_list = [\r\n  // left column front\r\n  0, 0,\r\n  0, 1,\r\n  1, 0,\r\n  0, 1,\r\n  1, 1,\r\n  1, 0,\r\n\r\n  // top rung front\r\n  0, 0,\r\n  0, 1,\r\n  1, 0,\r\n  0, 1,\r\n  1, 1,\r\n  1, 0,\r\n\r\n  // middle rung front\r\n  0, 0,\r\n  0, 1,\r\n  1, 0,\r\n  0, 1,\r\n  1, 1,\r\n  1, 0,\r\n\r\n  // left column back\r\n  0, 0,\r\n  1, 0,\r\n  0, 1,\r\n  0, 1,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // top rung back\r\n  0, 0,\r\n  1, 0,\r\n  0, 1,\r\n  0, 1,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // middle rung back\r\n  0, 0,\r\n  1, 0,\r\n  0, 1,\r\n  0, 1,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // top\r\n  0, 0,\r\n  1, 0,\r\n  1, 1,\r\n  0, 0,\r\n  1, 1,\r\n  0, 1,\r\n\r\n  // top rung right\r\n  0, 0,\r\n  1, 0,\r\n  1, 1,\r\n  0, 0,\r\n  1, 1,\r\n  0, 1,\r\n\r\n  // under top rung\r\n  0, 0,\r\n  0, 1,\r\n  1, 1,\r\n  0, 0,\r\n  1, 1,\r\n  1, 0,\r\n\r\n  // between top rung and middle\r\n  0, 0,\r\n  1, 1,\r\n  0, 1,\r\n  0, 0,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // top of middle rung\r\n  0, 0,\r\n  1, 1,\r\n  0, 1,\r\n  0, 0,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // right of middle rung\r\n  0, 0,\r\n  1, 1,\r\n  0, 1,\r\n  0, 0,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // bottom of middle rung.\r\n  0, 0,\r\n  0, 1,\r\n  1, 1,\r\n  0, 0,\r\n  1, 1,\r\n  1, 0,\r\n\r\n  // right of bottom\r\n  0, 0,\r\n  1, 1,\r\n  0, 1,\r\n  0, 0,\r\n  1, 0,\r\n  1, 1,\r\n\r\n  // bottom\r\n  0, 0,\r\n  0, 1,\r\n  1, 1,\r\n  0, 0,\r\n  1, 1,\r\n  1, 0,\r\n\r\n  // left side\r\n  0, 0,\r\n  0, 1,\r\n  1, 1,\r\n  0, 0,\r\n  1, 1,\r\n  1, 0,\r\n]\r\n\r\nexport {\r\n  F_3D_positions_list,\r\n  F_3D_colors_list,\r\n  F_3D_normals_list,\r\n  F_3D_texcoords_list\r\n}","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * AttributeClass provides functions for working with a WebGLProgram's attribute variable.\r\n *   The class establishes a data buffer for sending vertex attributes, such as vertex coordinates,\r\n *   texture coordinate data, or vertex color data through the graphics hardware pipeline.\r\n *   See [WebGL Fundamentals](https://webgl2fundamentals.org/webgl/lessons/webgl-fundamentals.html) for\r\n *   an explanation on data buffers.\r\n *\r\n */\r\nexport default class AttributeClass {\r\n  /**\r\n   * Create an AttributeClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context\r\n   * @param {number} type  Specifying the [data type]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer}\r\n   *   of each component in the array.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the attribute variable.\r\n   */\r\n  constructor(gl, type, program, name) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the attribute needs to go\r\n    this.attributeLocation = this.gl.getAttribLocation(program, name);\r\n    this.buffer = this.gl.createBuffer();\r\n  }\r\n\r\n  /**\r\n   * Describes how the attribute is read from the buffer pipeline.\r\n   * @param {number} size  The number of components per vertex attribute. Must be 1, 2, 3, or 4.\r\n   * @param {boolean} normalize Specifying whether integer data values should be normalized.\r\n   * @param {number} stride Specifying the offset in bytes between the beginning of consecutive vertex attributes.\r\n   * @param {number} offset Specifying an offset in bytes of the first component in the vertex attribute array.\r\n   */\r\n  bufferFormat(size, normalize, stride, offset) {\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Tell the attribute how to get data out of the internal ARRAY_BUFFER\r\n    this.gl.vertexAttribPointer(\r\n      this.attributeLocation,\r\n      size,\r\n      this.type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    this.gl.enableVertexAttribArray(this.attributeLocation);\r\n  }\r\n\r\n  /**\r\n   * Initializes and creates the buffer object's data store.\r\n   * @param {number[]} attribute_list Array containing vertex attributes, such as vertex coordinates, texture coordinate data, or vertex color data.\r\n   * @param {number} usage Specifies the intended [usage pattern]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} of the data store for optimization purposes.\r\n   */\r\n  setData(attribute_list, usage){\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Set geometry\r\n    switch(this.type){\r\n      case this.gl.FLOAT:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Float32Array(attribute_list),\r\n          usage\r\n        );\r\n      break;\r\n      case this.gl.UNSIGNED_BYTE:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Uint8Array(attribute_list),\r\n          usage\r\n        );\r\n        break;\r\n    }\r\n  }\r\n}","/**\r\n * Created by Rick on 2022-01-01.\r\n */\r\n'use strict';\r\n\r\nimport {toRadian as m4_toRadian} from \"gl-matrix/esm/common\";\r\nimport {\r\n  create as m4_create,\r\n  fromScaling as m4_fromScaling,\r\n  fromTranslation as m4_fromTranslation,\r\n  fromXRotation as m4_fromXRotation,\r\n  fromYRotation as m4_fromYRotation,\r\n  fromZRotation as m4_fromZRotation,\r\n  ortho as m4_ortho,\r\n  perspective as m4_perspective\r\n} from \"gl-matrix/esm/mat4\";\r\n\r\n/**\r\n * TransformsClass provides convenience functions for\r\n *   creating transform related matrices from the\r\n *   [gl-matrix library]{@link https://glmatrix.net/}\r\n */\r\nexport default class TransformsClass {\r\n  /**\r\n   * Creates a 4x4 orthogonal projection matrix with the given bounds.\r\n   * @param {number} left\r\n   * @param {number} right\r\n   * @param {number} bottom\r\n   * @param {number} top\r\n   * @param {number} near\r\n   * @param {number} far\r\n   * @returns {Float32Array} A 4x4 orthogonal projection matrix\r\n   */\r\n  static getOrthoMatrix(left, right, bottom, top, near, far){\r\n    const ortho_m4 = m4_create();\r\n    m4_ortho(ortho_m4, left, right, bottom, top, near, far);\r\n    return ortho_m4;\r\n  }\r\n\r\n  /**\r\n   * Creates a 4x4 perspective matrix\r\n   * @param {number} fov Vertical field of view in degrees.\r\n   * @param {number} aspect Aspect ratio. typically viewport width/height.\r\n   * @param {number} zNear Near bound of the frustum.\r\n   * @param {number}zFar Far bound of the frustum, can be null or Infinity.\r\n   * @returns {Float32Array} A 4x4 perspective matrix.\r\n   */\r\n  static getPerspectiveMatrix(fov, aspect, zNear, zFar){\r\n    const perspective_m4 = m4_create();\r\n    m4_perspective(perspective_m4, m4_toRadian(fov), aspect, zNear, zFar);\r\n    return perspective_m4;\r\n  }\r\n\r\n  /**\r\n   * Creates a 4x4 translation matrix\r\n   * @param {Float32Array} translate_ar A 3 element float array of x, y, z translation.\r\n   * @returns {Float32Array} A 4x4 translation matrix.\r\n   */\r\n  static getTranslationMatrix(translate_ar){\r\n    const translate_m4 = m4_create();\r\n    m4_fromTranslation(translate_m4, translate_ar);\r\n    return translate_m4\r\n  }\r\n\r\n  /**\r\n   * Creates a 4x4 rotation matrix for a specific axis\r\n   * @param {string} axis Axis of rotation \"x\", \"Y\", or \"z\".\r\n   * @param {number} rotation in degrees\r\n   * @returns {Float32Array} A 4x4 rotation matrix\r\n   */\r\n  static getXYZRotationMatrix(axis, rotation){\r\n    const rotate_m4 = m4_create();\r\n    if(axis === 'x'){\r\n      m4_fromXRotation(rotate_m4, m4_toRadian(rotation));\r\n    }else if(axis === 'y'){\r\n      m4_fromYRotation(rotate_m4, m4_toRadian(rotation));\r\n    }else if(axis === 'z'){\r\n      m4_fromZRotation(rotate_m4, m4_toRadian(rotation));\r\n    }\r\n    return rotate_m4;\r\n  }\r\n\r\n  /**\r\n   * Creates a 4x4 scaling matrix\r\n   * @param {Float32Array} scale_ar A 3 element float array of x, y, z scaling.\r\n   * @returns {Float32Array} A 4x4 scale matrix\r\n   */\r\n  static getScaleMatrix(scale_ar){\r\n    const scale_m4 = m4_create();\r\n    m4_fromScaling(scale_m4, scale_ar);\r\n    return scale_m4;\r\n  }\r\n}","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * UniformClass creates and sets various types\r\n *   of [uniform variables]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform}\r\n *   defined in shader code.\r\n */\r\nexport default class UniformClass {\r\n  /**\r\n   * Create a UninformClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the uniform variable.\r\n   * @param {string} type The type of uniform variable.\r\n   */\r\n  constructor(gl, program, name, type) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the uniform needs to go\r\n    this.uniformLocation = gl.getUniformLocation(program, name);\r\n  }\r\n\r\n  /**\r\n   * Set the value of the uniform variable.\r\n   * @param {number[]} args Array of values for the uniform variable.\r\n   *   The number of array elements submitted depends on the type of\r\n   *   variable being set.\r\n   */\r\n  setData(...args){\r\n    switch (this.type) {\r\n      case 'uniform1f':\r\n        this.gl.uniform1f(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform2f':\r\n        this.gl.uniform2f(this.uniformLocation, args[0], args[1]);\r\n        break;\r\n      case 'uniform4f':\r\n        this.gl.uniform4f(this.uniformLocation, args[0], args[1], args[2], args[3]);\r\n        break;\r\n      case 'uniform2fv':\r\n        this.gl.uniform2fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform3fv':\r\n        this.gl.uniform3fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform4fv':\r\n        this.gl.uniform4fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniformMatrix3fv':\r\n        this.gl.uniformMatrix3fv(this.uniformLocation,false,args[0]);\r\n        break;\r\n      case 'uniformMatrix4fv':\r\n        this.gl.uniformMatrix4fv(this.uniformLocation,false,args[0]);\r\n        break;\r\n      default:\r\n        throw new Error(`UniformClass: function ${this.type} has not been implemented.`);\r\n    }\r\n  }\r\n}","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\nimport {F_3D_positions_list, F_3D_colors_list} from \"./F-3D.js\";\r\nimport {vertex_shader, fragment_shader} from \"./shaders.js\";\r\nimport {AttributeClass} from \"web-gl-helpers\";\r\nimport {UniformClass} from \"web-gl-helpers\";\r\nimport {TransformsClass} from \"web-gl-helpers\";\r\nimport {createGLcontext} from \"web-gl-helpers\";\r\nimport {resizeCanvasToDisplaySize} from \"web-gl-helpers\";\r\nimport {createShader} from \"web-gl-helpers\";\r\nimport {createProgram} from \"web-gl-helpers\";\r\nimport {initializeContext} from \"web-gl-helpers\";\r\n\r\nimport {\r\n  create as m4_create,\r\n  multiply as m4_multiply\r\n} from \"gl-matrix/esm/mat4\";\r\n\r\ntry {\r\n  const context = createGLcontext('my_canvas');\r\n  const gl = context.gl;\r\n  const canvas = context.canvas;\r\n\r\n  // Turn on culling. By default backfacing triangles\r\n  //   will be culled.\r\n  gl.enable(gl.DEPTH_TEST); // enable depth testing\r\n  gl.enable(gl.CULL_FACE);  // enable culling of backfacing triangles\r\n  gl.depthFunc(gl.LEQUAL); // near things obscure far things\r\n\r\n  // Check canvas width and height\r\n  resizeCanvasToDisplaySize(canvas);\r\n\r\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n  // Create shader objects\r\n  const vShader = createShader(gl, gl.VERTEX_SHADER, vertex_shader);\r\n  const fShader = createShader(gl, gl.FRAGMENT_SHADER, fragment_shader);\r\n\r\n  // Create a WebGLProgram\r\n  const program = createProgram(gl, vShader, fShader);\r\n  // Tell context to use our program (a pair of shaders)\r\n  gl.useProgram(program);\r\n\r\n  // Set up position attribute for 'a_position'\r\n  // Create and set the attribute position data (a_position)\r\n  const position_type = gl.FLOAT; // the data is 32bit floats\r\n  const positionAttrib = new AttributeClass(gl, position_type, program,'a_position_v4');\r\n  positionAttrib.setData(F_3D_positions_list, gl.STATIC_DRAW);\r\n\r\n  // Set up varying color attribute for 'a_color'\r\n  const color_type = gl.UNSIGNED_BYTE; // the data is UNSIGNED_BYTE\r\n  const colorAttrib = new AttributeClass(gl, color_type, program,'a_color_v4');\r\n  colorAttrib.setData(F_3D_colors_list, gl.STATIC_DRAW);\r\n\r\n  // Associate shader attributes with corresponding data buffers\r\n  const vao = gl.createVertexArray();\r\n  // Make vao the one we're currently working with\r\n  gl.bindVertexArray(vao);\r\n\r\n  // Specify how to pull the position data out\r\n  {\r\n    const size = 3; // 3 components per iteration\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0; // 0 = move forward size * sizeof(type) each\r\n    //  iteration to get the next position\r\n    const offset = 0; // start at the beginning of the buffer\r\n    positionAttrib.bufferFormat(size, normalize, stride, offset);\r\n  }\r\n\r\n  // Specify how to pull the color data out\r\n  {\r\n    const size = 3; // 3 components per iteration\r\n    const normalize = true; // don't normalize the data\r\n    const stride = 0; // 0 = move forward size * sizeof(type) each\r\n    //  iteration to get the next position\r\n    const offset = 0; // start at the beginning of the buffer\r\n    colorAttrib.bufferFormat(size, normalize, stride, offset);\r\n  }\r\n\r\n  // Set up the uniforms\r\n  // Set up matrix uniform 'u_matrix'\r\n  const matrixUniform = new UniformClass(gl, program, 'u_matrix_m4', 'uniformMatrix4fv')\r\n\r\n  // Define drawing parameters\r\n  const primitiveType = gl.TRIANGLES;\r\n  const prim_offset = 0;\r\n  const triangle_count = 16 * 6;\r\n\r\n  // define the initial values for the transform parameters\r\n  let translation = [-150, 120, -380];\r\n  let rotation  = [180, 0, 0];\r\n  let scale = [1, 1, 1];\r\n\r\n\r\n  // Define perspective parameters\r\n  let fov = 60;\r\n  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n  const zNear = 1;\r\n  const zFar = 2000;\r\n\r\n  // define a function for drawing the scene\r\n  function drawScene(){\r\n    initializeContext(gl, [0.0, 0.0, 0.0, 1.0]); // black background\r\n\r\n    // Compute the perspective matrix\r\n    const perspective_m4 = TransformsClass.getPerspectiveMatrix(\r\n      fov,\r\n      aspect,\r\n      zNear,\r\n      zFar\r\n    )\r\n\r\n    // Define the transform matrices\r\n    const translate_m4 = TransformsClass.getTranslationMatrix(translation);\r\n    const x_rotate_m4 = TransformsClass.getXYZRotationMatrix('x',rotation[0]);\r\n    const y_rotate_m4 = TransformsClass.getXYZRotationMatrix('y',rotation[1]);\r\n    const z_rotate_m4 = TransformsClass.getXYZRotationMatrix('z',rotation[2]);\r\n    const scale_m4 = TransformsClass.getScaleMatrix(scale);\r\n\r\n    // Create transform_m4 by multiplying the matrices\r\n    const transform_m4 = m4_create();\r\n    m4_multiply(transform_m4, perspective_m4, translate_m4);\r\n    m4_multiply(transform_m4, transform_m4, x_rotate_m4);\r\n    m4_multiply(transform_m4, transform_m4, y_rotate_m4);\r\n    m4_multiply(transform_m4, transform_m4, z_rotate_m4);\r\n    m4_multiply(transform_m4, transform_m4, scale_m4);\r\n\r\n    // Set the new transform by assigning the uniform 'u_matrix'\r\n    matrixUniform.setData(transform_m4);\r\n\r\n    // draw the scene\r\n    gl.drawArrays(primitiveType, prim_offset, triangle_count);\r\n  }\r\n\r\n  // update functions called by user interface updates to parameters\r\n  function updateFieldOfView(value){\r\n    fov = value;\r\n    drawScene();\r\n  }\r\n\r\n  function updateTranslation(index, value){\r\n    translation[index] = value;\r\n    drawScene();\r\n  }\r\n\r\n  function updateRotation(index, value){\r\n    rotation[index] = value;\r\n    drawScene();\r\n  }\r\n\r\n  function updateScale(index, value){\r\n    scale[index] = value;\r\n    drawScene();\r\n  }\r\n\r\n  // set up the user interface for changes to the parameters\r\n  // define the z fudge factor value ui\r\n  const fieldOfView_slider = document.getElementById('fieldOfView');\r\n  const fieldOfView_output = document.getElementById('fieldOfView_output');\r\n  fieldOfView_slider.step = 0.2;\r\n  fieldOfView_slider.min = 1;\r\n  fieldOfView_slider.max = 179;\r\n\r\n  fieldOfView_slider.value = fov;\r\n  fieldOfView_output.textContent = fov;\r\n\r\n  fieldOfView_slider.addEventListener('input', ()=> {\r\n    const fieldOfView = +fieldOfView_slider.value;\r\n    fieldOfView_output.textContent = fieldOfView_slider.value;\r\n    updateFieldOfView(fieldOfView);\r\n  });\r\n\r\n  // define x, y, z translation slider attributes and event callbacks\r\n  const x_translate_slider = document.getElementById('x_translate');\r\n  const y_translate_slider = document.getElementById('y_translate');\r\n  const z_translate_slider = document.getElementById('z_translate');\r\n\r\n  const x_translate_output = document.getElementById('x_translate_output');\r\n  const y_translate_output = document.getElementById('y_translate_output');\r\n  const z_translate_output = document.getElementById('z_translate_output');\r\n\r\n  x_translate_slider.min = -200;\r\n  x_translate_slider.max = 200;\r\n  x_translate_slider.step = 2;\r\n  x_translate_slider.value = translation[0];\r\n  x_translate_output.textContent = translation[0];\r\n\r\n  y_translate_slider.min = -200;\r\n  y_translate_slider.max = 200;\r\n  y_translate_slider.step = 2;\r\n  y_translate_slider.value = translation[1];\r\n  y_translate_output.textContent = translation[1];\r\n\r\n  z_translate_slider.min = -1000;\r\n  z_translate_slider.max = 0;\r\n  z_translate_slider.step = 5;\r\n  z_translate_slider.value = translation[2];\r\n  z_translate_output.textContent = translation[2];\r\n\r\n  x_translate_slider.addEventListener('input', () => {\r\n    const x_translate = +x_translate_slider.value;\r\n    x_translate_output.textContent = x_translate;\r\n    updateTranslation(0, x_translate);\r\n  });\r\n  y_translate_slider.addEventListener('input', () => {\r\n    const y_translate =  +y_translate_slider.value;\r\n    y_translate_output.textContent = y_translate;\r\n    updateTranslation(1, y_translate);\r\n  })\r\n  z_translate_slider.addEventListener('input', () => {\r\n    const z_translate =  +z_translate_slider.value;\r\n    z_translate_output.textContent = z_translate;\r\n    updateTranslation(2, z_translate);\r\n  })\r\n\r\n  // define rotate sliders and its event callback\r\n  const x_rotate_slider = document.getElementById('x_rotate');\r\n  const y_rotate_slider = document.getElementById('y_rotate');\r\n  const z_rotate_slider = document.getElementById('z_rotate');\r\n\r\n  const x_rotate_slider_output = document.getElementById('x_rotate_output');\r\n  const y_rotate_slider_output = document.getElementById('y_rotate_output');\r\n  const z_rotate_slider_output = document.getElementById('z_rotate_output');\r\n\r\n  x_rotate_slider.step = y_rotate_slider.step = z_rotate_slider.step = 5.0;\r\n  x_rotate_slider.min = y_rotate_slider.min = z_rotate_slider.min = 0.0;\r\n  x_rotate_slider.max = y_rotate_slider.max = z_rotate_slider.max = 360.0;\r\n\r\n  x_rotate_slider.value = x_rotate_slider_output.textContent = rotation[0];\r\n  y_rotate_slider.value = y_rotate_slider_output.textContent = rotation[1];\r\n  z_rotate_slider.value = z_rotate_slider_output.textContent = rotation[2];\r\n\r\n  x_rotate_slider.addEventListener('input', () => {\r\n    const rotate = +x_rotate_slider.value;\r\n    x_rotate_slider_output.textContent = rotate;\r\n    updateRotation(0, rotate);\r\n  })\r\n  y_rotate_slider.addEventListener('input', () => {\r\n    const rotate = +y_rotate_slider.value;\r\n    y_rotate_slider_output.textContent = rotate;\r\n    updateRotation(1, rotate);\r\n  })\r\n  z_rotate_slider.addEventListener('input', () => {\r\n    const rotate = +z_rotate_slider.value;\r\n    z_rotate_slider_output.textContent = rotate;\r\n    updateRotation(2, rotate);\r\n  })\r\n\r\n  // define x, y scale slider attributes and event callbacks\r\n  const x_scale_slider = document.getElementById('x_scale');\r\n  const y_scale_slider = document.getElementById('y_scale');\r\n  const z_scale_slider = document.getElementById('z_scale');\r\n\r\n  const x_scale_output = document.getElementById('x_scale_output');\r\n  const y_scale_output = document.getElementById('y_scale_output');\r\n  const z_scale_output = document.getElementById('z_scale_output');\r\n\r\n  x_scale_slider.step = y_scale_slider.step = z_scale_slider.step = 0.1;\r\n  x_scale_slider.min = y_scale_slider.min = z_scale_slider.min = -5.0;\r\n  x_scale_slider.max = y_scale_slider.max = z_scale_slider.max = 5.0;\r\n\r\n  x_scale_slider.value = x_scale_output.textContent = scale[0];\r\n  y_scale_slider.value = y_scale_output.textContent = scale[1];\r\n  z_scale_slider.value = z_scale_output.textContent = scale[2];\r\n\r\n  x_scale_slider.addEventListener('input', () => {\r\n    const x_scale = +x_scale_slider.value;\r\n    x_scale_output.textContent = x_scale;\r\n    updateScale(0,x_scale);\r\n  });\r\n  y_scale_slider.addEventListener('input', () => {\r\n    const y_scale = +y_scale_slider.value;\r\n    y_scale_output.textContent = y_scale\r\n    updateScale(1,y_scale);\r\n  });\r\n  z_scale_slider.addEventListener('input', () => {\r\n    const z_scale = +z_scale_slider.value;\r\n    z_scale_output.textContent = z_scale\r\n    updateScale(2,z_scale);\r\n  });\r\n\r\n  // draw the initial scene\r\n  drawScene();\r\n}catch (e) {\r\n  console.log(e);\r\n}\r\n\r\n","/**\r\n * Created by Rick on 2022-01-11.\r\n */\r\n'use strict';\r\n\r\n/** @function createGLcontext\r\n * Create a WebGLRenderingContext from a canvas id.\r\n *\r\n * @param {string} canvas_id The html dom id for the canvas.\r\n * @param {string} context_type The context type. Acceptable values are '2d', 'webgl', 'webgl2', 'bitmaprenderer'.\r\n * @param {Object} options A set of options for the context. See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext}.\r\n * @returns {{gl: WebGLRenderingContext, canvas: HTMLElement}}\r\n */\r\nfunction createGLcontext(canvas_id, context_type='webgl2', options){\r\n  // One-time initialization of the scene.\r\n  const canvas = document.getElementById(canvas_id);\r\n  if(!canvas){\r\n    throw new Error(`createGLContext: Could not locate canvas element with id ${canvas_id}`);\r\n  }\r\n  // Create a WebGLRenderingContext\r\n  const gl = canvas.getContext(context_type, options);\r\n\r\n  return {\r\n    gl: gl,\r\n    canvas: canvas\r\n  };\r\n}\r\n\r\n/** @function\r\n * Initialize the WebGLRenderingContext by clearing the canvas and giving by default a white background.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to be initialized.\r\n * @param {number[]} color_v4 A 4 element vector where the first three values are the RGB values for\r\n *   the canvas background. The fourth is the alpha value.\r\n */\r\nfunction initializeContext(gl, color_v4 = [255.0,255.0,255.0,1.0]){\r\n  // Clear the canvas (red, gree, blue, alpha)\r\n  gl.enable(gl.BLEND);\r\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n  gl.clearColor(color_v4[0], color_v4[1], color_v4[2], color_v4[3]);  // clear to black, fully opaque\r\n  gl.clearDepth(1.0);  // clear everything\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\n/** @function\r\n * Check that the size of the canvas with the css values for width and height are the same.\r\n *\r\n * @param {HTMLElement} canvas The HTML canvas element whose size is to be checked.\r\n * @returns {boolean} Returns TRUE if the size was reassigned.\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas){\r\n  // Lookup the size the browser is displaying the canvas in css pixels\r\n  const displayWidth = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n\r\n  // Check if the canvas is not the same size\r\n  const needResize = canvas.width !== displayWidth ||\r\n    canvas.height !== displayHeight;\r\n\r\n  if(needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n\r\n  return needResize;\r\n}\r\n\r\n/** @function\r\n * Create a complete rendering program {WebGLProgram}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas.\r\n * @param {WebGLShader} vertex_shader The program's vertex shader.\r\n * @param {WebGLShader} frag_shader The program's fragment shader.\r\n * @returns {WebGLProgram}\r\n */\r\nfunction createProgram(gl, vertex_shader, frag_shader){\r\n  const program = gl.createProgram();\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, frag_shader);\r\n\r\n  // Link the WebGLProgram object\r\n  gl.linkProgram(program);\r\n\r\n  // Check for success\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n  if(!success) {\r\n    const program_info = gl.getProgramInfoLog(program);\r\n    gl.deleteProgram(program);\r\n    throw new Error('createProgram: ' + program_info);\r\n  }else {\r\n    return program;\r\n  }\r\n}\r\n\r\n/** @function\r\n * Creates a shader object {WebGLShader} given\r\n *   the source code. See [WebGLShader]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas\r\n * @param {number} type The type of shader, either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER.\r\n * @param {string} source The code/text of the shader.\r\n * @returns {WebGLShader}\r\n */\r\nfunction createShader(gl, type, source){\r\n  const shader = gl.createShader(type);\r\n  // Put the source code into the gl shader object\r\n  gl.shaderSource(shader, source);\r\n  // Compile the shader code\r\n  gl.compileShader(shader);\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n  if(!success){\r\n    const shader_info = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n    throw new Error('createShader: ' + shader_info);\r\n  }else {\r\n    return shader;\r\n  }\r\n}\r\n\r\nexport{\r\n  createGLcontext,\r\n  initializeContext,\r\n  resizeCanvasToDisplaySize,\r\n  createProgram,\r\n  createShader\r\n}"],"names":["$87efe1246dc31a7c$export$5251c35e57ac104c","$87efe1246dc31a7c$export$8a107ece9a624e5f","$78ae820aa9ececfa$export$b67359430d3b1b2","Float32Array","Array","Math","random","$78ae820aa9ececfa$var$degree","PI","$78ae820aa9ececfa$export$408b8ee5959eefd5","a","$26675c4f95835ef1$export$185802fd694ee1f5","out","$26675c4f95835ef1$export$2060d2db72cce88f","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","hypot","y","i","arguments","length","sqrt","$26675c4f95835ef1$export$541149539f3a4684","fovy","aspect","near","far","nf","f","tan","Infinity","$26675c4f95835ef1$export$4f2167e613cfc87b","left","right","bottom","top","lr","bt","$f8517097745e6edf$export$be1b00860175ea1f","constructor","gl","type","program","name","this","attributeLocation","getAttribLocation","buffer","createBuffer","bufferFormat","size","normalize","stride","offset","$f8517097745e6edf$export$9fd27ddb4fd2d937","static","ortho_m4","fov","zNear","zFar","perspective_m4","v","rad","s","c","sin","cos","$f8517097745e6edf$export$3889134346f53239","uniformLocation","getUniformLocation","setData","args","uniform1f","uniform2f","uniform4f","uniform2fv","context","canvas_id","context_type","options","canvas","document","getElementById","Error","getContext","$f8517097745e6edf$export$904a8156d3f18680","enable","DEPTH_TEST","CULL_FACE","depthFunc","LEQUAL","displayWidth","clientWidth","displayHeight","clientHeight","needResize","width","height","$f8517097745e6edf$export$4d986a341d0b1b6c","viewport","vShader","$f8517097745e6edf$export$1750aa77609e1fb","VERTEX_SHADER","fShader","FRAGMENT_SHADER","vertex_shader","frag_shader","$f8517097745e6edf$export$327d24a04cd0dc17","useProgram","position_type","FLOAT","positionAttrib","STATIC_DRAW","color_type","UNSIGNED_BYTE","colorAttrib","vao","createVertexArray","bindVertexArray","matrixUniform","primitiveType","TRIANGLES","prim_offset","triangle_count","translation","rotation","scale","$efd3ba4ec2608b1d$var$drawScene","color_v4","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","$f8517097745e6edf$export$881f7fb71351b304","getPerspectiveMatrix","translate_m4","getTranslationMatrix","x_rotate_m4","getXYZRotationMatrix","y_rotate_m4","z_rotate_m4","scale_m4","getScaleMatrix","transform_m4","drawArrays","$efd3ba4ec2608b1d$var$updateTranslation","index","value","$efd3ba4ec2608b1d$var$updateRotation","$efd3ba4ec2608b1d$var$updateScale","fieldOfView_slider","fieldOfView_output","step","min","max","textContent","addEventListener","fieldOfView","x_translate_slider","y_translate_slider","z_translate_slider","x_translate_output","y_translate_output","z_translate_output","x_translate","y_translate","z_translate","x_rotate_slider","y_rotate_slider","z_rotate_slider","x_rotate_slider_output","y_rotate_slider_output","z_rotate_slider_output","rotate","x_scale_slider","y_scale_slider","z_scale_slider","x_scale_output","y_scale_output","z_scale_output","x_scale","y_scale","z_scale","e"],"version":3,"file":"index.027f4004.js.map"}