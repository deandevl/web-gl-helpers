"undefined"!=typeof Float32Array&&Float32Array,Math.random;Math.PI;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});class t{constructor(t,e,r,a){this.gl=t,this.type=e,this.attributeLocation=this.gl.getAttribLocation(r,a),this.buffer=this.gl.createBuffer()}bufferFormat(t,e,r,a){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.gl.vertexAttribPointer(this.attributeLocation,t,this.type,e,r,a),this.gl.enableVertexAttribArray(this.attributeLocation)}setData(t,e){switch(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.type){case this.gl.FLOAT:this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),e);break;case this.gl.UNSIGNED_BYTE:this.gl.bufferData(this.gl.ARRAY_BUFFER,new Uint8Array(t),e)}}}class e{constructor(t){this.gl=t}setColor(t){const e=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array(t))}async loadTexture(t){this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([0,0,255,255]));let e=await fetch(t),r=await e.blob(),a=await createImageBitmap(r,{imageOrientation:"flipY"});const i=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,i),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.REPEAT),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.REPEAT),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,a)}}function r(t,e,r){const a=t.createShader(e);t.shaderSource(a,r),t.compileShader(a);if(t.getShaderParameter(a,t.COMPILE_STATUS))return a;{const e=t.getShaderInfoLog(a);throw t.deleteShader(a),new Error("createShader: "+e)}}try{const a=function(t,e="webgl2",r){const a=document.getElementById(t);if(!a)throw new Error(`createGLContext: Could not locate canvas element with id ${t}`);return{gl:a.getContext(e,r),canvas:a}}("my_canvas","webgl2"),i=a.gl;!function(t){const e=t.clientWidth,r=t.clientHeight,a=t.width!==e||t.height!==r;a&&(t.width=e,t.height=r)}(a.canvas),i.viewport(0,0,i.canvas.width,i.canvas.height);const n=r(i,i.VERTEX_SHADER,"#version 300 es\n\nin vec3 a_coords_v3;\nin vec2 a_texCoords_v2;\n\nout vec2 v_texCoords_v2;\n\nvoid main() {\n  // Pass the texCoords to the fragment shader\n  v_texCoords_v2 = a_texCoords_v2;\n  \n  gl_Position = vec4(a_coords_v3, 1.0);\n}\n"),o=r(i,i.FRAGMENT_SHADER,"#version 300 es\n\nprecision highp float;\n\n// A sampler variable to represent the texture unit number.\nuniform sampler2D u_sampler_unit;\n\n// The texture coordinates for this pixel from the vertex shader.\nin vec2 v_texCoords_v2;\n\n// We need to declare an output for the fragment shader\nout vec4 outColor_v4;\n\nvoid main() {\n  // Sample the texture.\n  vec4 color = texture(u_sampler_unit, v_texCoords_v2);\n  outColor_v4 = color;\n}\n"),s=function(t,e,r){const a=t.createProgram();if(t.attachShader(a,e),t.attachShader(a,r),t.linkProgram(a),t.getProgramParameter(a,t.LINK_STATUS))return a;{const e=t.getProgramInfoLog(a);throw t.deleteProgram(a),new Error("createProgram: "+e)}}(i,n,o);i.useProgram(s);const h=[-2,-1,0,-2,1,0,0,1,0,-2,-1,0,0,1,0,0,-1,0],l=new t(i,i.FLOAT,s,"a_coords_v3");l.setData(h,i.STATIC_DRAW);const g=[0,0,0,1,1,1,0,0,1,1,1,0],c=new t(i,i.FLOAT,s,"a_texCoords_v2");c.setData(g,i.STATIC_DRAW);const _=i.createVertexArray();i.bindVertexArray(_);{const t=3,e=!1,r=0,a=0;l.bufferFormat(t,e,r,a)}{const t=2,e=!1,r=0,a=0;c.bufferFormat(t,e,r,a)}const E=i.getUniformLocation(s,"u_sampler_unit");i.uniform1i(E,0);new e(i).loadTexture("brick.jpg").then((()=>{!function(t,e=[255,255,255,1]){t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.clearColor(e[0],e[1],e[2],e[3]),t.clearDepth(1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}(i),i.drawArrays(i.TRIANGLES,0,6),i.bindTexture((void 0).gl.TEXTURE_2D,null)}))}catch(t){console.log(t)}
//# sourceMappingURL=index.b7884725.js.map
